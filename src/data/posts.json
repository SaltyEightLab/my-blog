{
  "posts": [
    {
      "id": "1",
      "title": "Next.js13をUdemyで学ぶ",
      "content": "shincodeさんの教材でNext.js13を学んでいます。",
      "createdAt": "2024/2/01"
    },
    {
      "id": "2",
      "title": "TypeScript & Next.js を使ってブログを作る。",
      "content": "TypeScript & Next.js を使ってブログを作っています。この演習を通して、TypeScriptとNext.jsでの開発の進め方が定着するといいなと思う。",
      "createdAt": "2024/02/02"
    },
    {
      "id": "3",
      "title": "個別の記事ページ作成中。",
      "content": "動的ルーティングを使って、個別の記事ページを作成中。動的ルーティングについての理解が難しかったけど、要するに次のようなことだと思う。①[xx]ディレクトに配置したpage.tsxは動的ルーティングの対象ページとなる。②href=`/${id}`としておき、[id]には、propsにより渡された記事データのidを代入する。③個別の記事ページ内では、propsとして[id]に代入された文字列がparams.idとして受け取ることができるので、これを利用して個別の記事データを取得し展開する。",
      "createdAt": "2024/02/04"
    },
    {
      "id": "4",
      "title": "新規投稿機能作成中。",
      "content": "useStateを使うことで、新規投稿作成画面にてformの中の文字列が変わっている場合にpost.json内のデータを新たに作成するようにAPIを組む。これにより、jsonデータが追加され、それがArticleList.tsx画面に反映される。思ったより簡単な仕組みだ！",
      "createdAt": "2024-02-04T20:09:56.347Z"
    },
    {
      "id": "5",
      "title": "ローディング機能の実装",
      "content": "投稿ボタンにローディング機能を実装した。\n記述は意外と簡単で、ボタンのclassName=\"\"をclassName={}とし、中に「${loading} ? XXX : YYY」と三項演算子を記述するだけのもの。ローディング時間を意図的に秒とり確認したところ、ちゃんとローディング動作を確認することができました。",
      "createdAt": "2024-02-04T21:18:00.429Z"
    }
  ]
}